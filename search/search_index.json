{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to corecos extension docs","text":""},{"location":"#introduction","title":"Introduction","text":"<ul> <li>This is the main extension for cocos engine and is owned by SUN STUDIO </li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"installation/","title":"Corecos Setup","text":""},{"location":"installation/#initial-setup","title":"\ud83d\ude80 Initial Setup","text":"<ul> <li> <p>Choose Package Manager</p> <ul> <li>You can use either Yarn or Bun as your package manager. Ensure you have one of them installed:<ul> <li>Yarn Installation Guide</li> <li>Bun Installation Guide</li> </ul> </li> </ul> </li> <li> <p>Add Corecos Repository</p> <ul> <li>Add the remote repository: <code>git remote add corecos [git@corecos-repo-link]</code></li> <li>Pull the latest code: <code>git pull corecos master</code></li> </ul> </li> <li> <p>Setup Corecos Submodule (Admin Only)</p> <ul> <li>Initialize submodules if it's your first time: <code>git submodule update --init &amp;&amp; git submodule update --remote</code> (only first time)</li> <li>Update submodules otherwise: <code>git submodule update</code></li> </ul> </li> </ul>"},{"location":"installation/#initialize-corecos","title":"\ud83d\udd25 Initialize Corecos","text":"Understanding Environment and Config InheritanceInitialize Corecos <ul> <li> <p>Environment Files (<code>./extensions/corecos/env</code>): These files define environment-specific variables that are used during the build and runtime processes. The inheritance follows this order:</p> <ul> <li><code>.env</code>: Base environment settings.</li> <li><code>.env.preview</code> or <code>.env.browser</code>: Specific settings for preview or browser environments.</li> <li><code>*.local</code>: This is custom environment for same platform, e.g., <code>env.browser.local</code> for localhost.</li> <li>Platform-specific overrides (e.g., <code>env.browser.local</code> -&gt; <code>env.facebook.local</code>, <code>env.msgames.local</code>, etc.): These files provide additional or overriding settings for specific platforms.</li> </ul> </li> <li> <p>Configuration Files (<code>./extensions/corecos/src/configs</code>): These files define game-specific configurations. The inheritance follows a similar pattern:</p> <ul> <li><code>config.defaults.ts</code>: Base configuration settings for the game.</li> <li><code>config.preview.defaults.ts</code> or <code>config.browser.defaults.ts</code>: Specific settings for preview or browser environments.</li> <li><code>*.custom.ts</code>: This is custom config for same platform, e.g., <code>config.browser.custom.ts</code> for localhost.</li> <li>Platform-specific overrides (e.g., <code>config.browser.custom.ts</code> -&gt; <code>config.facebook.custom.ts</code>, <code>config.msgames.custom.ts</code>, etc.): These files provide additional or overriding settings for specific platforms.</li> </ul> </li> </ul> <ol> <li>Install dependencies: <code>bun install</code><ul> <li>Note: If you get an error about <code>node_modules</code> not found, run <code>yarn install</code> in <code>./extensions/corecos</code>.</li> </ul> </li> <li>Run the CLI to initialize core: <code>bun init:core</code><ul> <li>Note: You can initialize a specific platform, e.g., <code>bun init:core --to facebook</code></li> <li>Note: You can force initialize a specific platform, e.g., <code>bun init:core --to facebook --force</code></li> </ul> </li> <li>Build the extension: <code>bun build:extension</code> (run twice if it's your first time)</li> <li>Update your game name in <code>./extensions/corecos/env/env.local</code><ul> <li>Example: <code>VITE_GAME_NAME = Save The Pets</code></li> </ul> </li> <li>Set up the <code>auto-version</code> feature by setting <code>VITE_BUILD_VERSION = 0</code> in an ENV file.<ul> <li>Example: <code>./extensions/corecos/env/env.browser.local</code> - for localhost</li> <li>Example: <code>./extensions/corecos/env/env.facebook.local</code> - for Facebook Instant Game</li> </ul> </li> <li>Update your <code>AppId</code> for the live version in a config file.<ul> <li>Example: <code>./extensions/corecos/src/configs/config.browser.custom.ts</code> - for localhost</li> <li>Example: <code>./extensions/corecos/src/configs/config.facebook.custom.ts</code> - for Facebook Instant Game</li> </ul> </li> </ol>"},{"location":"installation/#enable-corecos-extension","title":"\ud83c\udfae Enable Corecos Extension","text":"<ul> <li>Build the extension: <code>bun build:extension</code></li> </ul> <p>You may need to run this script every time you pull new code from corecos</p> <ul> <li>Open Cocos Creator with your project.</li> <li>Open <code>Extension Manager</code>, click <code>Installed</code>, and enable the <code>corecos</code> extension.</li> </ul> <p>The <code>corecos</code> extension is enabled by default; check if needed.</p> <ul> <li>Close and reopen Cocos Creator.</li> </ul> <p>If you use <code>Reload</code> in the <code>Developer -&gt; Reload</code> menu, you need to run <code>Reload</code> in the <code>Corecos -&gt; Reload</code> menu.</p>"},{"location":"installation/#setup-game-project-first-time","title":"\ud83c\udfd7\ufe0f Setup Game Project (first time)","text":"Preview ModeBuild Mode <ol> <li>Add your Corecos game folder to the Cocos Dashboard.<ul> <li>Install Cocos Dashboard: https://www.cocos.com/en/dashboard</li> <li>Install Engine version: 3.8.5</li> </ul> </li> <li>Open Cocos Creator with your project.</li> <li>Ignore console errors; you may need to run <code>Reload</code> from the <code>Corecos -&gt; Reload</code> menu.</li> <li>Proceed to: <code>Run Project on Preview Mode</code></li> </ol> <ol> <li>Open the Build popup (Ctrl + Shift + B).</li> <li>Import a build config in Cocos Build from: <code>./configs/buildConfig_localhost.json</code><ul> <li>Click <code>New Build Task</code>, select <code>Platform: Web Mobile</code>, and click <code>Import Build Config</code>.</li> <li>Note: If the config is not for web-mobile, select the correct platform first.</li> <li>Note: If import twice, you need to check correct build path in <code>Build Path</code> field.</li> </ul> </li> <li>Run the build for the first time; Cocos Creator will save your build config.<ul> <li>Note: You may click the cancel button to stop the draft build.</li> </ul> </li> <li>Update your Cocos Creator path in <code>./extensions/corecos/env/env.local</code><ul> <li>Example (Windows): <code>COCOS_CREATOR_PATH = C:\\ProgramData\\cocos\\editors\\Creator\\3.8.5\\CocosCreator.exe</code></li> <li>Example (Mac): <code>COCOS_CREATOR_PATH = /Applications/Cocos/Creator/3.8.5/CocosCreator.app/Contents/MacOS/CocosCreator</code></li> </ul> </li> <li>Proceed to: <code>Run Project on Local</code></li> </ol>"},{"location":"installation/#explanation-of-cmds","title":"\ud83d\udcdc Explanation of cmds","text":"Core CommandsBuild CommandsArguments for CommandsUtil Commands <ul> <li><code>bun init:core</code>: Initialize corecos to create local env and custom config files.</li> <li><code>bun build:extension</code>: Build the extension for Cocos Creator.</li> <li><code>bun preview</code>: Build the bundle for preview mode.</li> </ul> <ul> <li> <p>Base Format for Build Commands:</p> <ul> <li><code>bun build:localhost</code>: Build the game for localhost (production).</li> <li><code>bun build:lc</code>: This is the same as <code>bun build:localhost</code>, but it has <code>auto-version</code> feature.</li> <li><code>bun version:lc</code>: Auto-build version for localhost.</li> <li><code>bun rollback:lc</code>: Rollback version for localhost.</li> </ul> </li> <li> <p>Additional Format for Build Commands:</p> <ul> <li><code>bun upload:fb</code>: Only run upload archive by build version to host for Facebook Instant Game.</li> <li><code>bun deploy:fb</code>: Build the bundle, archive, and upload to host for Facebook Instant Game.</li> </ul> </li> </ul> <p>For other platforms, you can use the same format for build commands.</p> <p>Example: <code>bun build:android</code> or <code>bun build:ad</code> for Android</p> <ul> <li><code>--sbg</code>: Skip building the Cocos game.</li> <li><code>--sbc</code>: Skip building corecos.</li> <li><code>--kcc</code>: Kill Cocos Creator before building, helpful if the build always gets stuck.</li> <li><code>--bbo</code>: Build bundle only, reducing build time.</li> <li><code>--to</code>: Build for a specific platform.</li> <li><code>--force</code>: Force process for some commands.</li> </ul> <ul> <li><code>bun util:es5</code>: Validate ES5 code.</li> <li><code>bun util:fix</code>: Auto-fix syntax errors in the Cocos project.</li> <li><code>bun util:check</code>: Check for syntax errors in the Cocos project.</li> <li><code>bun util:unused</code>: Check for unused code in the Cocos project.</li> <li><code>bun util:format</code>: Format code in the Cocos project.</li> </ul>"},{"location":"notice/","title":"Notice","text":"<p>You should notice that because this is my experience while working with this extension, typescript, cocos, game industry</p>"},{"location":"notice/#avoid-change-or-modify-anything-in-corecos-extension-as-much-as-possible","title":"Avoid change or modify anything in corecos extension as much as possible","text":"<ul> <li>If you find bugs or something weird. Please contact to Mr. WON for more information</li> </ul>"},{"location":"notice/#avoid-using-settimeout","title":"Avoid using setTimeOut()","text":"<ul> <li>You can use node.scheduleOnce() or node.schedule()</li> </ul>"},{"location":"notice/#node-should-build-like-a-tree","title":"Node should build like a tree","text":"<ul> <li>You cannot drag script in a node that is a child of node A to the other nodes that has same level with node A</li> <li>The parent node can access to any child node (even scripts). Children nodes can only access in their scope only.</li> </ul>"},{"location":"notice/#how-to-delete-the-cache-do-it-in-order-until-no-errors","title":"How to delete the cache (do it in order until no errors)","text":"<ul> <li>Use this in devtool <code>cc.game.emit('clear-hybrid-file-cache')</code></li> <li>Clear cache at <code>application -&gt; clear data</code> on web (devtool)</li> <li>In cocos editor, go to <code>Developer -&gt; Cache -&gt; Clear code cache</code></li> <li>Delete 3 folders in project: profile, temp, library and then reopen cocos again</li> </ul>"},{"location":"notice/#meta-file","title":"Meta file","text":"<ul> <li>Meta file can be created by creating a new folder </li> </ul>"},{"location":"notice/#how-to-check-bundle-size-of-game","title":"How to check bundle size of game","text":"<ul> <li>Open game on facebook</li> <li>Open devtool -&gt; Network</li> <li>Choose one asset of a game</li> <li>Copy link (such as: <code>https://apps-1485269139041031.apps.fbsbx.com/br-compress-instant-bundle</code>) and paste it in filter</li> <li>Reload game again</li> </ul>"},{"location":"notice/#lazy-load","title":"Lazy load","text":"<ul> <li>Definition: Player still can play game while the data is loading</li> <li>Lazy load: sprite, prefab, audio,...</li> </ul>"},{"location":"notice/#do-not-use-objectentriesforeach-or-foreach","title":"Do not use object.entries.foreach or foreach","text":"<ul> <li>You can use for...of... instead</li> </ul>"},{"location":"notice/#how-to-build-efficient-game-play","title":"How to build efficient game play","text":"<ul> <li>You should separate logic game and animation into two part</li> </ul>"},{"location":"notice/#link-to-run-your-game-faster-and-code-changes-game-reload-again","title":"Link to run your game faster and code changes -&gt; game reload again","text":"<ul> <li>http://localhost:7456/?no-toolbar=1&amp;no-vconsole=1&amp;auto-resize=1&amp;auto-refresh=1</li> </ul> <p>Please change the port relatively</p>"},{"location":"notice/#particle-effect","title":"Particle effect","text":"<ul> <li>Texture use for particle should turn off Packable</li> <li>Texture of particle cannot be packed in atlas</li> </ul>"},{"location":"notice/#build-localhost","title":"Build localhost","text":"<ul> <li>Always name the folder is <code>localhost</code></li> </ul>"},{"location":"notice/#config-size-for-game","title":"Config size for game","text":"<ul> <li>You can change config size of game (landscape, portrait) in <code>GameWord.ts</code></li> </ul>"},{"location":"notice/#delete-the-old-facebook-app-id","title":"Delete the old facebook app id","text":"<ul> <li>Go to <code>configs -&gt; fb-deploy-config.json</code>. Delete file <code>fb-deploy-config.json</code></li> </ul> <p>This file will be generated automatically when you run core-init again</p>"},{"location":"notice/#canvas","title":"Canvas","text":"<ul> <li>Do not leave the camera property in canvas blank. Assign camera to it</li> </ul>"},{"location":"notice/#spine","title":"Spine","text":"<ul> <li>Must use lazy load to load spine</li> <li>Turn off Premultiplied alpha when use spine</li> <li>Turn on spine and add manually in <code>Cocos editor -&gt; Project settings -&gt; Feature cropping</code></li> <li>Go to boot scene -&gt; Turn on <code>loadWasmModuleSpine()</code> and make sure instantiate after loadWasmModuleSpine finished (lazy load spine)</li> </ul>"},{"location":"phaser/","title":"Phaser","text":"<p>Work with phaser</p>"},{"location":"phaser/#just-type-anything-for-appid-token-when-running-project-on-local","title":"Just type anything for appId, token when running project on local","text":""},{"location":"reference/","title":"Reference","text":"<p>All the thing you should know will be here.</p>"},{"location":"reference/#banner-ad-height","title":"Banner Ad height","text":"<ul> <li>You should put the block lines of code in a script (such as GameScene.ts) for retrieving easily     <pre><code>window.game.ads\n.showBannerAdAsync(GameCore.Configs.Ads.BannerDisplayAdOptions[0].PlacementId)\n.catch((error) =&gt; {\n    console.warn('showBannerAdAsync', error)\n}) \n</code></pre></li> <li>If the banner ad does not show you may try this. Go to <code>MockBannerInstance.ts</code>. Update <code>getAdContentAsync()</code> function with this one     <pre><code>    private async getAdContentAsync(): Promise&lt;string&gt; {\n    const response = await fetch(this.apiAdContent, { method: 'GET' })\n\n    const json = await response.json()\n\n    if (!('data' in json)) return ''\n\n    if (!Array.isArray(json.data)) return ''\n\n    const images = json.data as { images: { downsized: { url: string } } }[]\n    const rand = Math.floor(Math.random() * images.length)\n\n    return images[rand].images.downsized.url\n}\n</code></pre></li> </ul>"},{"location":"reference/#debugger","title":"Debugger","text":"<ul> <li>You can run any event of project game when it registers in the scene in web console with this command:      <pre><code>    cc.director.getScene().emit('event-name')\n</code></pre></li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#1-env-and-configs-in-corecos-preview-mode","title":"1. ENV and Configs in Corecos - Preview Mode","text":"<ol> <li>Run this script to update ENV and Configs to the bundle: <code>bun preview</code></li> <li>(WIP) Or use the <code>File Watcher</code> extension (appulate.filewatcher) for auto-updating ENV and Configs to the bundle.<ul> <li>Note: You need to install this extension in VSCode first.</li> </ul> </li> </ol>"},{"location":"usage/","title":"Corecos Usage","text":""},{"location":"usage/#running-the-project","title":"Running the Project","text":"Run Project on Preview Mode (localhost)Run Project on Local (Development Build Mode)Run Project on Web (Production Build Mode) <ol> <li>Set up ENV in <code>env.preview.local</code> from <code>./extensions/corecos/env</code></li> <li>Set up Configs in <code>config.preview.custom.ts</code> from <code>./extensions/corecos/src/configs</code></li> <li>Run this script to build the bundle in preview mode: <code>bun preview</code></li> </ol> <p>Run this script only once. If you need to update ENV or Configs, run it again.</p> <ol> <li>Import build config in Cocos Build from: <code>./configs/buildConfig_localhost.json</code></li> <li>Set up ENV in <code>env.browser.local</code> from <code>./extensions/corecos/env</code><ul> <li>Set <code>GAME_SDK = null</code></li> </ul> </li> <li>Set up Configs in <code>config.browser.custom.ts</code> from <code>./extensions/corecos/src/configs</code></li> <li>Run this script to build the bundle: <code>bun build:localhost</code><ul> <li> <p>If you only need to test the build flow, run <code>bun build:localhost --sbg</code> to skip building the game.</p> </li> </ul> </li> <li>Open this link in a browser: http://127.0.0.1:7456/web-mobile/localhost/index.html<ul> <li> <p>Open Cocos Creator with your project before opening this link.</p> </li> </ul> </li> </ol> <ul> <li>Guide for Facebook Instant Game<ol> <li>Import build config in Cocos Build from: <code>./configs/buildConfig_facebook.json</code> (only first time)</li> <li>Set up ENV in <code>env.facebook.local</code> from <code>./extensions/corecos/env</code><ul> <li>Set <code>GAME_SDK = https://connect.facebook.net/en_US/fbinstant.7.1.js</code> for Facebook Instant Game</li> <li> <p>If it doesn't exist, please check flow <code>Initialize Corecos</code></p> </li> </ul> </li> <li>Set up Configs in <code>config.facebook.custom.ts</code> from <code>./extensions/corecos/src/configs</code><ul> <li> <p>If it doesn't exist, please check flow <code>Initialize Corecos</code></p> </li> </ul> </li> <li>Check your code: <code>bun util:check</code> and <code>bun util:unused</code></li> <li>Run this script to build game: <code>bun build:facebook</code><ul> <li> <p>Check build log, if there's an error, you need to fix it first.</p> </li> </ul> </li> <li>When all done, use <code>bun deploy:fb</code> to archive and upload to host.<ul> <li> <p>Check build log, to continue guide.</p> </li> <li> <p><code>:fb</code> is has <code>auto-version</code> feature, and <code>:facebook</code> is not.</p> </li> </ul> </li> </ol> </li> </ul>"}]}